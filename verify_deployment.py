#!/usr/bin/env python3
"""
Verifica√ß√£o espec√≠fica para o Streamlit Cloud - demonstra que o novo c√≥digo est√° ativo.
Execute este arquivo diretamente no Streamlit Cloud para verificar o deployment.
"""

import streamlit as st
import os
import sys
from datetime import datetime

def main():
    st.title("üîç Verifica√ß√£o de Deployment - Algoritmo Inteligente")
    st.write("Esta p√°gina verifica se as mudan√ßas do p√≥s-processamento foram aplicadas no Streamlit Cloud.")
    
    # Informa√ß√µes do ambiente
    st.subheader("üìã Informa√ß√µes do Ambiente")
    col1, col2 = st.columns(2)
    
    with col1:
        st.write(f"**Python:** {sys.version}")
        st.write(f"**Working Dir:** {os.getcwd()}")
        st.write(f"**Timestamp:** {datetime.now()}")
    
    with col2:
        st.write(f"**Files Count:** {len(os.listdir('.'))}")
        st.write(f"**Platform:** {sys.platform}")
    
    # Verifica√ß√£o dos arquivos cr√≠ticos
    st.subheader("üìÅ Verifica√ß√£o de Arquivos")
    
    critical_files = [
        'src/pdf_postprocessor.py',
        'src/core/pdf_finalizer.py',
        'src/rendering/engine.py'
    ]
    
    for file_path in critical_files:
        exists = os.path.exists(file_path)
        if exists:
            st.success(f"‚úÖ {file_path}")
        else:
            st.error(f"‚ùå {file_path}")
    
    # Verifica√ß√£o das fun√ß√µes do novo algoritmo
    st.subheader("üß† Verifica√ß√£o do Algoritmo Inteligente")
    
    try:
        from src.pdf_postprocessor import PDFPostProcessor
        
        # Verificar m√©todos do novo algoritmo
        methods_to_check = [
            '_analyze_page_content',
            '_is_page_truly_empty'
        ]
        
        all_methods_found = True
        for method in methods_to_check:
            has_method = hasattr(PDFPostProcessor, method)
            if has_method:
                st.success(f"‚úÖ PDFPostProcessor.{method}")
            else:
                st.error(f"‚ùå PDFPostProcessor.{method}")
                all_methods_found = False
        
        if all_methods_found:
            st.balloons()
            st.success("üéâ **NOVO ALGORITMO INTELIGENTE ATIVO!**")
            st.info("O p√≥s-processador agora usa detec√ß√£o inteligente de p√°ginas vazias.")
        else:
            st.warning("‚ö†Ô∏è **ALGORITMO ANTIGO AINDA ATIVO**")
            st.error("As mudan√ßas n√£o foram aplicadas corretamente.")
            
    except ImportError as e:
        st.error(f"‚ùå Erro de importa√ß√£o: {e}")
        st.warning("N√£o foi poss√≠vel importar o PDFPostProcessor")
    
    # Verifica√ß√£o do engine
    st.subheader("‚öôÔ∏è Verifica√ß√£o do Engine")
    
    try:
        with open('src/rendering/engine.py', 'r', encoding='utf-8') as f:
            content = f.read()
            
        if 'enable_postprocessing = True' in content:
            st.success("‚úÖ P√≥s-processamento HABILITADO no engine")
        elif 'enable_postprocessing = False' in content:
            st.warning("‚ö†Ô∏è P√≥s-processamento DESABILITADO no engine")
        else:
            st.info("‚ùì Status do p√≥s-processamento indeterminado")
            
        # Contar ocorr√™ncias de strings chave
        intelligent_count = content.count('_is_page_truly_empty')
        if intelligent_count > 0:
            st.success(f"‚úÖ Algoritmo inteligente referenciado {intelligent_count} vezes")
        else:
            st.error("‚ùå Algoritmo inteligente n√£o encontrado no engine")
            
    except Exception as e:
        st.error(f"‚ùå Erro ao verificar engine: {e}")
    
    # Teste de fun√ß√µes
    st.subheader("üß™ Teste das Fun√ß√µes")
    
    if st.button("Testar Algoritmo Inteligente"):
        try:
            from src.pdf_postprocessor import PDFPostProcessor
            
            # Simular an√°lise de p√°gina
            test_page_analysis = {
                'has_images': False,
                'has_charts': False,
                'has_visual_elements': False,
                'meaningful_text_length': 5,
                'footer_patterns': ['ize.com.br'],
                'is_special_page': False
            }
            
            # Testar fun√ß√£o
            is_empty = PDFPostProcessor._is_page_truly_empty(
                "ize.com.br @ize_", test_page_analysis, 5, 10
            )
            
            if is_empty:
                st.success("‚úÖ Fun√ß√£o _is_page_truly_empty funcionando - p√°gina detectada como vazia")
            else:
                st.info("‚ÑπÔ∏è Fun√ß√£o _is_page_truly_empty funcionando - p√°gina detectada com conte√∫do")
                
            st.json(test_page_analysis)
            
        except Exception as e:
            st.error(f"‚ùå Erro no teste: {e}")
    
    # Resumo final
    st.subheader("üìä Resumo do Status")
    
    try:
        from src.pdf_postprocessor import PDFPostProcessor
        has_new_algo = hasattr(PDFPostProcessor, '_analyze_page_content')
        
        if has_new_algo:
            st.success("üéØ **STATUS: DEPLOYMENT CORRETO**")
            st.write("‚úÖ O novo algoritmo inteligente est√° ativo")
            st.write("‚úÖ P√°ginas com gr√°ficos ser√£o preservadas")
            st.write("‚úÖ Apenas p√°ginas realmente vazias ser√£o removidas")
        else:
            st.error("üö® **STATUS: DEPLOYMENT INCORRETO**")
            st.write("‚ùå Algoritmo antigo ainda ativo")
            st.write("‚ùå P√°ginas com gr√°ficos podem ser removidas")
            
    except Exception:
        st.error("üö® **STATUS: ERRO CR√çTICO**")
        st.write("‚ùå N√£o foi poss√≠vel verificar o status")

if __name__ == "__main__":
    main()