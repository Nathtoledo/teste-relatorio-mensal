#!/usr/bin/env python3
"""
Script de diagn√≥stico para verificar se as mudan√ßas est√£o sendo aplicadas no Streamlit Cloud.
"""

import sys
import os
import importlib.util

def check_file_exists(file_path):
    """Verifica se um arquivo existe."""
    exists = os.path.exists(file_path)
    print(f"üìÅ {file_path}: {'‚úÖ EXISTS' if exists else '‚ùå NOT FOUND'}")
    return exists

def check_function_in_module(module_path, function_name):
    """Verifica se uma fun√ß√£o espec√≠fica existe em um m√≥dulo."""
    try:
        spec = importlib.util.spec_from_file_location("test_module", module_path)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        
        has_function = hasattr(module, function_name)
        print(f"üîç {function_name} in {module_path}: {'‚úÖ FOUND' if has_function else '‚ùå NOT FOUND'}")
        return has_function
    except Exception as e:
        print(f"‚ùå Error checking {module_path}: {e}")
        return False

def check_postprocessor_version():
    """Verifica qual vers√£o do p√≥s-processador est√° sendo usada."""
    try:
        from src.pdf_postprocessor import PDFPostProcessor
        
        # Verificar se tem os m√©todos novos
        has_analyze_page_content = hasattr(PDFPostProcessor, '_analyze_page_content')
        has_is_page_truly_empty = hasattr(PDFPostProcessor, '_is_page_truly_empty')
        
        print(f"üß† PDFPostProcessor._analyze_page_content: {'‚úÖ FOUND' if has_analyze_page_content else '‚ùå NOT FOUND'}")
        print(f"üß† PDFPostProcessor._is_page_truly_empty: {'‚úÖ FOUND' if has_is_page_truly_empty else '‚ùå NOT FOUND'}")
        
        if has_analyze_page_content and has_is_page_truly_empty:
            print("‚úÖ NOVO ALGORITMO INTELIGENTE CARREGADO!")
            return True
        else:
            print("‚ùå ALGORITMO ANTIGO AINDA ATIVO!")
            return False
            
    except ImportError as e:
        print(f"‚ùå Erro ao importar PDFPostProcessor: {e}")
        return False

def check_engine_postprocessing():
    """Verifica se o p√≥s-processamento est√° habilitado no engine."""
    try:
        with open('src/rendering/engine.py', 'r', encoding='utf-8') as f:
            content = f.read()
            
        if 'enable_postprocessing = True' in content:
            print("‚úÖ P√ìS-PROCESSAMENTO HABILITADO no engine.py")
            return True
        elif 'enable_postprocessing = False' in content:
            print("‚ö†Ô∏è P√ìS-PROCESSAMENTO DESABILITADO no engine.py")
            return False
        else:
            print("‚ùì Status do p√≥s-processamento INDETERMINADO")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar engine.py: {e}")
        return False

def main():
    print("üîç DIAGN√ìSTICO DE DEPLOYMENT - STREAMLIT CLOUD")
    print("=" * 60)
    
    # Verificar arquivos essenciais
    print("\nüìÅ VERIFICANDO ARQUIVOS:")
    check_file_exists('src/pdf_postprocessor.py')
    check_file_exists('src/core/pdf_finalizer.py')
    check_file_exists('src/rendering/engine.py')
    
    # Verificar fun√ß√µes espec√≠ficas
    print("\nüîç VERIFICANDO FUN√á√ïES:")
    check_function_in_module('src/pdf_postprocessor.py', '_analyze_page_content')
    check_function_in_module('src/pdf_postprocessor.py', '_is_page_truly_empty')
    
    # Verificar vers√£o do p√≥s-processador
    print("\nüß† VERIFICANDO ALGORITMO:")
    new_algo = check_postprocessor_version()
    
    # Verificar status do engine
    print("\n‚öôÔ∏è VERIFICANDO ENGINE:")
    engine_enabled = check_engine_postprocessing()
    
    # Resumo final
    print("\n" + "=" * 60)
    print("üìã RESUMO DO DIAGN√ìSTICO:")
    
    if new_algo and engine_enabled:
        print("‚úÖ CONFIGURA√á√ÉO CORRETA - Novo algoritmo ativo!")
    elif new_algo and not engine_enabled:
        print("‚ö†Ô∏è ALGORITMO OK mas p√≥s-processamento DESABILITADO")
    elif not new_algo:
        print("‚ùå ALGORITMO ANTIGO ainda ativo - problema de deployment!")
    else:
        print("‚ùì STATUS INDETERMINADO - investiga√ß√£o manual necess√°ria")
    
    print(f"\nüêç Python: {sys.version}")
    print(f"üìç Working Directory: {os.getcwd()}")
    print(f"üìÇ Files in current dir: {len(os.listdir('.'))}")

if __name__ == "__main__":
    main()